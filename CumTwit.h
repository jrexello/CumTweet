/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CUMTWIT_H_RPCGEN
#define _CUMTWIT_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAX_CAD 120

typedef char *mensaje;

typedef struct usuario_t usuario;

typedef char *cadena;

typedef struct credenciales_t credenciales;

typedef struct paquete_t paquete;

typedef struct buscador_t buscador;

typedef struct nodo *lista;

struct buscador_t {
	int tipo;
	cadena login;
	cadena login_buscado;
	cadena fecha;
};
typedef struct buscador_t buscador_t;

struct paquete_t {
	mensaje mess;
	cadena dest;
	cadena remite;
	cadena fecha;
	cadena hora;
};
typedef struct paquete_t paquete_t;

struct usuario_t {
	cadena login;
	cadena nombre;
	cadena apellido;
	cadena passwd;
	cadena ciudad;
	cadena pais;
	cadena fecha;
};
typedef struct usuario_t usuario_t;

struct credenciales_t {
	cadena login;
	cadena passwd;
};
typedef struct credenciales_t credenciales_t;

struct nodo {
	paquete info;
	lista siguiente;
};
typedef struct nodo nodo;

struct res_busqueda {
	int error;
	union {
		lista list;
	} res_busqueda_u;
};
typedef struct res_busqueda res_busqueda;

#define CUMTWIT 0x20000007
#define CT_VERSION 2

#if defined(__STDC__) || defined(__cplusplus)
#define registrar 1
extern  void * registrar_2(usuario *, CLIENT *);
extern  void * registrar_2_svc(usuario *, struct svc_req *);
#define enviar 2
extern  int * enviar_2(paquete *, CLIENT *);
extern  int * enviar_2_svc(paquete *, struct svc_req *);
#define leer 3
extern  paquete * leer_2(credenciales *, CLIENT *);
extern  paquete * leer_2_svc(credenciales *, struct svc_req *);
#define existeUser 4
extern  int * existeuser_2(cadena *, CLIENT *);
extern  int * existeuser_2_svc(cadena *, struct svc_req *);
#define eliminar 5
extern  int * eliminar_2(credenciales *, CLIENT *);
extern  int * eliminar_2_svc(credenciales *, struct svc_req *);
#define logearse 6
extern  int * logearse_2(credenciales *, CLIENT *);
extern  int * logearse_2_svc(credenciales *, struct svc_req *);
#define busca 7
extern  res_busqueda * busca_2(buscador *, CLIENT *);
extern  res_busqueda * busca_2_svc(buscador *, struct svc_req *);
extern int cumtwit_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define registrar 1
extern  void * registrar_2();
extern  void * registrar_2_svc();
#define enviar 2
extern  int * enviar_2();
extern  int * enviar_2_svc();
#define leer 3
extern  paquete * leer_2();
extern  paquete * leer_2_svc();
#define existeUser 4
extern  int * existeuser_2();
extern  int * existeuser_2_svc();
#define eliminar 5
extern  int * eliminar_2();
extern  int * eliminar_2_svc();
#define logearse 6
extern  int * logearse_2();
extern  int * logearse_2_svc();
#define busca 7
extern  res_busqueda * busca_2();
extern  res_busqueda * busca_2_svc();
extern int cumtwit_2_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_mensaje (XDR *, mensaje*);
extern  bool_t xdr_usuario (XDR *, usuario*);
extern  bool_t xdr_cadena (XDR *, cadena*);
extern  bool_t xdr_credenciales (XDR *, credenciales*);
extern  bool_t xdr_paquete (XDR *, paquete*);
extern  bool_t xdr_buscador (XDR *, buscador*);
extern  bool_t xdr_lista (XDR *, lista*);
extern  bool_t xdr_buscador_t (XDR *, buscador_t*);
extern  bool_t xdr_paquete_t (XDR *, paquete_t*);
extern  bool_t xdr_usuario_t (XDR *, usuario_t*);
extern  bool_t xdr_credenciales_t (XDR *, credenciales_t*);
extern  bool_t xdr_nodo (XDR *, nodo*);
extern  bool_t xdr_res_busqueda (XDR *, res_busqueda*);

#else /* K&R C */
extern bool_t xdr_mensaje ();
extern bool_t xdr_usuario ();
extern bool_t xdr_cadena ();
extern bool_t xdr_credenciales ();
extern bool_t xdr_paquete ();
extern bool_t xdr_buscador ();
extern bool_t xdr_lista ();
extern bool_t xdr_buscador_t ();
extern bool_t xdr_paquete_t ();
extern bool_t xdr_usuario_t ();
extern bool_t xdr_credenciales_t ();
extern bool_t xdr_nodo ();
extern bool_t xdr_res_busqueda ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CUMTWIT_H_RPCGEN */
